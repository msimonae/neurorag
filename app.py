{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1Zdb_h0BmUYfOMbYtTJu4j18wrLEvqNDR","authorship_tag":"ABX9TyO3tXNbqwmoMHKOINnSaXl9"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"DtfUHg9sFHEB"},"outputs":[],"source":["import streamlit as st\n","import pandas as pd\n","import numpy as np\n","import networkx as nx\n","import itertools\n","import google.generativeai as genai\n","import chromadb\n","from chromadb import PersistentClient\n","from sentence_transformers import SentenceTransformer\n","from collections import Counter\n","\n","# --- Configura√ß√£o da P√°gina Streamlit ---\n","st.set_page_config(page_title=\"NeuroGRAG - Copiloto Cl√≠nico\", layout=\"wide\")\n","st.title(\"üß† NeuroGRAG: Copiloto Cl√≠nico Explic√°vel\")\n","st.markdown(\"\"\"\n","Este aplicativo demonstra uma abordagem experimental para apoio ao racioc√≠nio m√©dico em triagem psiqui√°trica,\n","utilizando LLMs, grafos cl√≠nicos e Recupera√ß√£o Aumentada de Gera√ß√£o (RAG).\n","**Aten√ß√£o:** Este √© um projeto acad√™mico e de pesquisa. N√£o utilize para diagn√≥sticos reais.\n","\"\"\")\n","\n","# --- Cache para Modelos e Dados ---\n","@st.cache_resource\n","def carregar_modelo_embedding():\n","    return SentenceTransformer('all-MiniLM-L6-v2')\n","\n","@st.cache_resource\n","def carregar_dados_e_setup_grafo_chroma():\n","    try:\n","        df_transtornos = pd.read_csv(\"df_transtornos.csv\")\n","    except FileNotFoundError:\n","        st.error(\"Arquivo 'df_transtornos.csv' n√£o encontrado. Gere-o a partir do notebook e coloque na raiz do app.\")\n","        return None, None, None\n","\n","    # 1. Grafo de Conhecimento\n","    G = nx.Graph()\n","    diagnosticos_unicos = []\n","    if not df_transtornos.empty:\n","        for _, linha in df_transtornos.iterrows():\n","            diag = linha['diagn√≥stico']\n","            if pd.notna(diag) and diag not in diagnosticos_unicos:\n","                 if isinstance(diag, str) and ('F' in diag or 'ND' in diag):\n","                    diagnosticos_unicos.append(diag)\n","\n","            if pd.notna(linha['sintomas_principais']):\n","                sintomas = [s.strip() for s in str(linha['sintomas_principais']).split(',')]\n","                for sintoma in sintomas:\n","                    if pd.notna(diag) and pd.notna(sintoma):\n","                        G.add_edge(sintoma, diag, tipo='sintoma-diagnostico')\n","\n","            if pd.notna(linha['tratamento']):\n","                tratamentos = [t.strip() for t in str(linha['tratamento']).split(',')]\n","                for trat in tratamentos:\n","                    if pd.notna(diag) and pd.notna(trat):\n","                        G.add_edge(diag, trat, tipo='diagn√≥stico-tratamento')\n","    else:\n","        st.warning(\"DataFrame df_transtornos est√° vazio. O grafo n√£o ser√° populado.\")\n","\n","\n","    # 2. ChromaDB\n","    modelo_embed = carregar_modelo_embedding()\n","    chroma_client = PersistentClient(path='./chroma_saude_mental_st') # Novo path para Streamlit\n","\n","    # Deletar cole√ß√£o antiga se existir para evitar conflitos de dimens√£o (opcional, mas bom para dev)\n","    try:\n","        if 'casos_clinicos_st' in [c.name for c in chroma_client.list_collections()]:\n","            chroma_client.delete_collection(name='casos_clinicos_st')\n","            st.info(\"Cole√ß√£o ChromaDB 'casos_clinicos_st' antiga recriada.\")\n","    except Exception as e:\n","        st.warning(f\"N√£o foi poss√≠vel deletar a cole√ß√£o antiga: {e}\")\n","\n","    colecao = chroma_client.get_or_create_collection(name='casos_clinicos_st')\n","\n","    if not df_transtornos.empty and 'texto_clinico' in df_transtornos.columns:\n","        chunks = []\n","        metadados_list = []\n","        ids_chunks = []\n","        tamanho_chunk = 200 # Definido no notebook\n","\n","        for idx, linha in df_transtornos.iterrows():\n","            texto = str(linha['texto_clinico']) # Garantir que √© string\n","            palavras = texto.split()\n","            id_paciente = str(linha['id_paciente'])\n","            diagnostico = str(linha['diagn√≥stico'])\n","            sintomas = str(linha['sintomas_principais'])\n","\n","            for i_chunk in range(0, len(palavras), tamanho_chunk):\n","                trecho = ' '.join(palavras[i_chunk:i_chunk + tamanho_chunk])\n","                chunk_id = f'{id_paciente}_chunk_{i_chunk // tamanho_chunk}'\n","                chunks.append(trecho)\n","                ids_chunks.append(chunk_id)\n","                metadados_list.append({\n","                    'id_paciente': id_paciente,\n","                    'diagn√≥stico': diagnostico,\n","                    'sintomas': sintomas,\n","                    'indice_chunk': i_chunk // tamanho_chunk\n","                })\n","\n","        if chunks: # Apenas se houver chunks para processar\n","            embeddings = modelo_embed.encode(chunks)\n","            colecao.add(\n","                embeddings=embeddings.tolist(),\n","                documents=chunks,\n","                metadatas=metadados_list,\n","                ids=ids_chunks\n","            )\n","            st.success(f'{len(chunks)} chunks indexados no ChromaDB.')\n","        else:\n","            st.warning(\"Nenhum chunk gerado para indexa√ß√£o no ChromaDB. Verifique os dados de 'texto_clinico'.\")\n","\n","    else:\n","        st.warning(\"Coluna 'texto_clinico' n√£o encontrada ou df_transtornos vazio. ChromaDB n√£o ser√° populado.\")\n","\n","    return df_transtornos, G, colecao\n","\n","# --- Carregamento Inicial ---\n","modelo_embedding = carregar_modelo_embedding()\n","df_transtornos, G_conhecimento, colecao_chroma = carregar_dados_e_setup_grafo_chroma()\n","\n","# --- Configura√ß√£o da API Key do Gemini ---\n","# Para Streamlit Cloud, use st.secrets\n","# Para desenvolvimento local, use st.text_input\n","google_api_key = st.sidebar.text_input(\"Cole sua GOOGLE_API_KEY do Gemini aqui:\", type=\"password\")\n","\n","modelo_gemini = None\n","if google_api_key:\n","    try:\n","        genai.configure(api_key=google_api_key)\n","        modelo_gemini = genai.GenerativeModel('gemini-1.5-pro') # ou gemini-pro\n","        st.sidebar.success(\"API Key do Gemini configurada com sucesso!\")\n","    except Exception as e:\n","        st.sidebar.error(f\"Erro ao configurar a API Key: {e}\")\n","else:\n","    st.sidebar.warning(\"Por favor, insira sua API Key do Gemini para continuar.\")\n","\n","# --- Interface do Usu√°rio ---\n","st.header(\"Entrada do Caso Cl√≠nico\")\n","relato_paciente_input = st.text_area(\"Descreva o relato do paciente (sintomas, hist√≥rico, etc.):\", height=150)\n","sintomas_chave_input = st.text_input(\"Informe os sintomas-chave detectados (separados por v√≠rgula):\",\n","                                     help=\"Ex: tristeza profunda, fadiga, isolamento social\")\n","\n","if st.button(\"Analisar Caso Cl√≠nico\") and modelo_gemini and G_conhecimento and colecao_chroma:\n","    if not relato_paciente_input.strip():\n","        st.error(\"Por favor, preencha o relato do paciente.\")\n","    elif not sintomas_chave_input.strip():\n","        st.error(\"Por favor, informe os sintomas-chave.\")\n","    else:\n","        with st.spinner(\"Analisando o caso... Este processo pode levar alguns minutos.\"):\n","            sintomas_detectados_lista = [s.strip().lower() for s in sintomas_chave_input.split(',')] # Convertido para min√∫sculas\n","\n","            # 1. Consulta ao Grafo de Conhecimento\n","            diagnosticos_possiveis_grafo = set()\n","            if G_conhecimento is not None:\n","                for sintoma_g in sintomas_detectados_lista:\n","                    # Tentar encontrar o sintoma no grafo (considerando varia√ß√µes)\n","                    nos_candidatos = [n for n in G_conhecimento.nodes() if isinstance(n, str) and sintoma_g in n.lower()]\n","                    for no_candidato in nos_candidatos:\n","                        if G_conhecimento.has_node(no_candidato):\n","                            conexoes = list(G_conhecimento.neighbors(no_candidato))\n","                            diagnosticos_possiveis_grafo.update([d for d in conexoes if isinstance(d, str) and ('F' in d or 'ND' in d)])\n","\n","            st.subheader(\"Resultados da An√°lise:\")\n","            with st.expander(\"Diagn√≥sticos Sugeridos pelo Grafo de Conhecimento\", expanded=False):\n","                if diagnosticos_possiveis_grafo:\n","                    for diag_g in diagnosticos_possiveis_grafo:\n","                        st.write(f\"- {diag_g}\")\n","                else:\n","                    st.write(\"Nenhum diagn√≥stico diretamente conectado aos sintomas-chave foi encontrado no grafo.\")\n","\n","            # 2. Consulta ao Banco Vetorial (RAG)\n","            rag_resultados_formatados = [\"Nenhum caso semelhante encontrado no banco vetorial.\"]\n","            if colecao_chroma is not None and relato_paciente_input:\n","                embedding_query = modelo_embedding.encode([relato_paciente_input])\n","                try:\n","                    resultados_rag = colecao_chroma.query(\n","                        query_embeddings=embedding_query.tolist(),\n","                        n_results=3\n","                    )\n","\n","                    docs_recuperados = []\n","                    if resultados_rag and resultados_rag['documents'] and resultados_rag['documents'][0]:\n","                        for i, doc_rag in enumerate(resultados_rag['documents'][0]):\n","                            meta_rag = resultados_rag['metadatas'][0][i]\n","                            docs_recuperados.append(\n","                                f\"  Caso {i+1} (ID: {meta_rag.get('id_paciente', 'N/A')}, Diagn√≥stico: {meta_rag.get('diagn√≥stico', 'N/A')}):\\n  Trecho: \\\"{doc_rag}\\\"\\n  Sintomas Registrados: {meta_rag.get('sintomas', 'N/A')}\"\n","                            )\n","                        rag_resultados_formatados = docs_recuperados\n","\n","                except Exception as e:\n","                    st.error(f\"Erro ao consultar o ChromaDB: {e}\")\n","\n","            with st.expander(\"Casos Cl√≠nicos Semelhantes (RAG)\", expanded=False):\n","                for res_rag in rag_resultados_formatados:\n","                    st.markdown(res_rag)\n","\n","            # 3. Gera√ß√£o da Resposta com LLM (Gemini)\n","            prompt_final_template = f'''\n","              Voc√™ √© um assistente cl√≠nico especializado em sa√∫de mental, treinado para analisar sintomas, sugerir diagn√≥sticos e indicar condutas terap√™uticas com base em conhecimento estruturado.\n","\n","              Relato do Paciente:\n","              {relato_paciente_input}\n","\n","              Sintomas-Chave Identificados:\n","              {', '.join(sintomas_detectados_lista)}\n","\n","              Diagn√≥sticos Poss√≠veis Sugeridos pelo Grafo de Conhecimento (conex√µes diretas com sintomas-chave):\n","              {chr(10).join(diagnosticos_possiveis_grafo) if diagnosticos_possiveis_grafo else \"Nenhum diagn√≥stico diretamente conectado encontrado no grafo.\"}\n","\n","              Casos Cl√≠nicos Semelhantes Recuperados do Banco Vetorial (para contextualiza√ß√£o):\n","              {chr(10).join(rag_resultados_formatados)}\n","\n","              Com base NO RELATO DO PACIENTE, nos SINTOMAS-CHAVE IDENTIFICADOS, e considerando o CONTEXTO dos diagn√≥sticos do grafo e dos casos recuperados, forne√ßa uma an√°lise cl√≠nica:\n","\n","              1.  **Diagn√≥stico Mais Prov√°vel:** Indique o CID-10 e o nome do transtorno que voc√™ considera mais compat√≠vel com o relato completo do paciente.\n","              2.  **Justificativa Cl√≠nica:** Explique sua escolha diagn√≥stica, correlacionando os sintomas espec√≠ficos do relato do paciente com os crit√©rios diagn√≥sticos. Mencione se o hist√≥rico familiar (se houver no relato) ou outros fatores s√£o relevantes.\n","              3.  **Conduta Inicial Sugerida:** Recomende uma conduta terap√™utica inicial (ex: tipo de medica√ß√£o geral se aplic√°vel, tipo de psicoterapia, necessidade de acompanhamento especializado).\n","              4.  **Avalia√ß√£o de Risco e Encaminhamento:** Avalie brevemente se h√° indicadores de risco elevado (ex: idea√ß√£o suicida, agita√ß√£o psicomotora severa) e se um encaminhamento urgente para um psiquiatra ou servi√ßo de emerg√™ncia √© necess√°rio.\n","\n","              Responda com clareza, embasamento e em linguagem cl√≠nica adequada. Foque no caso atual do paciente.\n","            '''\n","\n","            st.info(\"Gerando an√°lise cl√≠nica com o modelo Gemini...\")\n","            try:\n","                resposta_gemini = modelo_gemini.generate_content(prompt_final_template)\n","                st.subheader(\"An√°lise Cl√≠nica Detalhada (NeuroGRAG):\")\n","                st.markdown(resposta_gemini.text)\n","            except Exception as e:\n","                st.error(f\"Erro ao gerar resposta com o Gemini: {e}\")\n","                st.error(f\"Prompt enviado ao Gemini (para depura√ß√£o):\\n```\\n{prompt_final_template}\\n```\")\n","\n","elif not modelo_gemini:\n","    st.info(\"Aguardando a inser√ß√£o da API Key do Gemini para habilitar a an√°lise.\")\n","elif not G_conhecimento or not colecao_chroma:\n","    st.error(\"N√£o foi poss√≠vel carregar os dados do grafo ou do ChromaDB. Verifique o arquivo 'df_transtornos.csv'.\")\n","\n","st.sidebar.markdown(\"---\")\n","st.sidebar.markdown(\"Desenvolvido como parte de um estudo experimental.\")\n","st.sidebar.markdown(\"Aluno: Marcelo Massashi Simonae\")"]}]}